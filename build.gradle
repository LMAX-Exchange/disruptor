/*
 * Copyright 2011 LMAX Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'idea'
    id "io.github.reyerizo.gradle.jcstress" version "0.8.14"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.gems' version '3.3.2'
    id "me.champeau.jmh" version "0.6.8"
    id "biz.aQute.bnd.builder" version "6.3.1"
}

group = 'com.lmax'
version = new Version(major: 4, minor: 0, revision: 0, snapshot: true)

defaultTasks 'build'

ext {
    fullName = 'Disruptor Framework'
    fullDescription = 'Disruptor - Concurrent Programming Framework'
    teamName = 'LMAX Disruptor Development Team'
    siteUrl = 'https://lmax-exchange.github.io/disruptor'
    sourceUrl = 'git@github.com:LMAX-Exchange/disruptor.git'
    moduleName = 'com.lmax.disruptor'
}

apply from: 'gradle/maven.gradle'
apply from: 'gradle/perf.gradle'
apply from: 'gradle/jmh.gradle'
apply from: 'gradle/asciidoc.gradle'
apply from: 'gradle/jcstress.gradle'

wrapper.gradleVersion = '7.6'

repositories {
    mavenCentral()
    ruby.gems()
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:10.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

compileJava {
    options.fork = true
    options.debug = true
    options.warnings = true
    options.deprecation = true
}
compileTestJava {
    options.fork = true
    options.debug = true
    options.warnings = true
    options.deprecation = true
}

test {
    useJUnitPlatform()
    systemProperties = [
            'junit.jupiter.execution.parallel.enabled': 'true',
            'junit.jupiter.execution.parallel.mode.default': 'concurrent'
    ]
}

javadoc {
    title = 'Disruptor'

    options.addStringOption('XDignore.symbol.file', '-quiet')
    options.author = true
    options.bottom = "<i>Copyright &#169; 2011 - ${Calendar.instance[Calendar.YEAR]} LMAX Ltd. All Rights Reserved.</i>"
    options.use = true
    options.version = true
    options.showFromPublic()

    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    manifest.attributes('Built-By': System.properties.get('user.name'),
            'Automatic-Module-Name': moduleName)
    bnd(
            '-exportcontents': 'com.lmax.disruptor.*;-noimport:=true',
            '-noimportjava': 'true',
            'Import-Package': '!*',
            'Bundle-Name': fullName,
            'Bundle-Vendor': teamName,
            'Bundle-Description': fullDescription,
            'Bundle-DocURL': siteUrl,
            'Bundle-SymbolicName': moduleName,
    )
}

tasks.withType(Test) {
    maxParallelForks = (int) Math.max(Math.floor(Runtime.runtime.availableProcessors() / 2), 1)
}

task setUpGitHooks(type: Exec, description: 'Add a pre-commit git hook that runs gradle check & test tasks') {
    def hooksFolder = file('.githooks').getAbsolutePath()
    commandLine 'git', 'config', 'core.hooksPath', hooksFolder
}

class Version {
    int major, minor = 0, revision = 0
    boolean snapshot
    String stage

    String toString() {
        "$major.$minor.$revision${stage ? '.' + stage : ''}${snapshot ? '-SNAPSHOT' : ''}"
    }
}

sourceSets {
    examples {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
