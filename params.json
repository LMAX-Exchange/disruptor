{"body":"## Disruptor 2.10.3 Released (22-Aug-2012 - rev 593)\r\n\r\n- Bug fix, race condition in SequenceGroup when removing Sequences and getting current value\r\n\r\n## Disruptor 2.10.2 Released (21-Aug-2012 - rev 588)\r\n\r\n- Bug fix, potential race condition in BlockingWaitStrategy.\r\n- Bug fix set initial SequenceGroup value to -1 (Issue #27).\r\n- Deprecate timeout methods that will be removed in version 3.\r\n\r\n## Disruptor 2.10.1 Released (6-June-2012 - rev 560)\r\n\r\n- Bug fix, correct OSGI metadata.\r\n- Remove unnecessary code in wait strategies.\r\n\t\r\n## Disruptor 2.10 Released (13-May-2012 - rev 546)\r\n\r\n- Remove deprecated timeout methods.\r\n- Added OSGI metadata to jar file.\r\n- Removed PaddedAtomicLong and use Sequence in all places.\r\n- Fix various generics warnings.\r\n- Change Sequence implementation to work around IBM JDK bug and improve performance by ~10%.\r\n- Add a remainingCapacity() call to the Sequencer class.\r\n\r\n[Full Changelog...](http://code.google.com/p/disruptor/wiki/ChangeLog)\r\n[Download here...](http://code.google.com/p/disruptor/downloads/list)\r\n\r\n## Read This First\r\n\r\nTo understand the problem the Disruptor is trying to solve, and to get a feel for why this concurrency framework is so fast, read the \r\n[Technical Paper](http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf).  It also contains detailed performance results.\r\n\r\nAnd now for some words from our sponsors...LMAX are recruiting once again.  If you are interested in working with a great team, with some amazing technology, and think you can add something to the mix then please check out our [jobs page](http://www.lmaxtrader.co.uk/about-lmax/careers).\r\n \r\n## What is the Disruptor?\r\n\r\n[LMAX](http://www.LMAXtrader.co.uk) aims to be the fastest trading platform in the world.  Clearly, in order to achieve this we needed to do something special to achieve very low-latency and high-throughput with our Java platform. Performance testing showed that using queues to pass data between stages of the system was introducing latency, so we focused on optimising this area.\r\n\r\nThe Disruptor is the result of our research and testing.  We found that cache misses at the CPU-level, and locks requiring kernel arbitration are both extremely costly, so we created a framework which has \"mechanical sympathy\" for the hardware it's running on, and that's lock-free.\r\n\r\nThis is not a specialist solution, it's not designed to work only for a financial application.  The Disruptor is a general-purpose mechanism for solving a difficult problem in concurrent programming.\r\n\r\nIt works in a different way to more conventional approaches, so you use it a little differently than you might be used to.  For example, applying the pattern to your system is not as simple as replacing all your queues with the [magic ring buffer](https://trishagee.com/2011/06/22/dissecting_the_disruptor_whats_so_special_about_a_ring_buffer/).  We've got [code samples](CodeExampleDisruptor2x) to guide you, a growing number of [[Blogs And Articles|blogs and articles]] giving an overview of how it works, the [technical paper](http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf) goes into some detail as you'd expect, and the performance tests give examples of how to use the Disruptor:\r\n\r\n        ${MY_PROJECTS_HOME}/disruptor-read-only/code/src/perf/\r\n\r\nIf you prefer real, live people explaining things instead of a dry paper or content-heavy website, there's always the [presentation Mike and Martin gave](http://www.infoq.com/presentations/LMAX) at QCon San Francisco.  If you fancy a natter with the folks involved head over to our [Discussion Group](http://groups.google.com/group/lmax-disruptor). Martin will also witter on occasionally about performance in his [Mechanical Sympathy](http://mechanical-sympathy.blogspot.com/) blog.  Martin Fowler has also done a great [review](http://martinfowler.com/articles/lmax.html) of the Disruptor's application at LMAX.\r\n\r\n## What's the big deal?\r\n\r\nIt's fast.  Very fast.\r\n\r\nhttp://lmax-exchange.github.com/disruptor/images/latency-histogram.png\r\n\r\nNote that this is a log-log scale, not linear.  If we tried to plot the comparisons on a linear scale, we'd run out of space very quickly.  We have [[Performance Results|more details]] of the test that produced these results, plus others of throughput testing.\r\n\r\n## Great  What do I do next?\r\n\r\n- [[Getting Started|Getting started]] â€“ how to check out the code, build it and run the performance tests\r\n- Read the [API documentation](http://code.google.com/p/disruptor/downloads/list)\r\n- [Download](http://code.google.com/p/disruptor/downloads/list) the latest jar\r\n- Take a look at the [[Change Log|changelog]]\r\n- Check out our [[Frequently Asked Questions|FAQ]]","tagline":"High Performance Inter-Thread Messaging Library","google":"","name":"Disruptor","note":"Don't delete this file! It's used internally to help with page regeneration."}